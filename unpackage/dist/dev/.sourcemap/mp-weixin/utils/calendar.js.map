{"version":3,"file":"calendar.js","sources":["utils/calendar.js"],"sourcesContent":["/**\n * 万年历转换工具类\n * 实现公历与农历之间的转换，以及节气计算\n */\n\nclass CalendarConverter {\n  constructor() {\n    // 农历数据表 (1900-2100年)\n    // 每个数值包含该年农历月份的天数信息和闰月信息\n    this.lunarData = [\n      0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2,\n      0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977,\n      0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970,\n      // ... 更多数据，这里简化显示\n    ];\n    \n    // 天干\n    this.tianGan = ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'];\n    \n    // 地支\n    this.diZhi = ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'];\n    \n    // 生肖\n    this.zodiac = ['鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪'];\n    \n    // 节气数据\n    this.solarTerms = [\n      '小寒', '大寒', '立春', '雨水', '惊蛰', '春分',\n      '清明', '谷雨', '立夏', '小满', '芒种', '夏至',\n      '小暑', '大暑', '立秋', '处暑', '白露', '秋分',\n      '寒露', '霜降', '立冬', '小雪', '大雪', '冬至'\n    ];\n    \n    // 基准日期: 1900年1月31日为农历1900年正月初一\n    this.baseDate = new Date(1900, 0, 31);\n  }\n  \n  /**\n   * 公历转农历\n   * @param {number} year 公历年\n   * @param {number} month 公历月 (1-12)\n   * @param {number} day 公历日\n   * @returns {Object} 农历信息\n   */\n  solarToLunar(year, month, day) {\n    const date = new Date(year, month - 1, day);\n    \n    // 计算距离基准日期的天数\n    const timeDiff = date.getTime() - this.baseDate.getTime();\n    const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n    \n    let lunarYear = 1900;\n    let lunarMonth = 1;\n    let lunarDay = 1;\n    let remainDays = daysDiff;\n    \n    // 计算农历年\n    while (remainDays > 0) {\n      const daysInYear = this.getLunarYearDays(lunarYear);\n      if (remainDays >= daysInYear) {\n        remainDays -= daysInYear;\n        lunarYear++;\n      } else {\n        break;\n      }\n    }\n    \n    // 计算农历月\n    let monthDays;\n    while (remainDays > 0) {\n      monthDays = this.getLunarMonthDays(lunarYear, lunarMonth);\n      if (remainDays >= monthDays) {\n        remainDays -= monthDays;\n        lunarMonth++;\n      } else {\n        break;\n      }\n    }\n    \n    lunarDay = remainDays + 1;\n    \n    return {\n      year: lunarYear,\n      month: lunarMonth,\n      day: lunarDay,\n      isLeap: this.isLeapMonth(lunarYear, lunarMonth),\n      zodiac: this.zodiac[(lunarYear - 4) % 12],\n      yearGanZhi: this.getYearGanZhi(lunarYear),\n      monthGanZhi: this.getMonthGanZhi(lunarYear, lunarMonth),\n      dayGanZhi: this.getDayGanZhi(year, month, day)\n    };\n  }\n  \n  /**\n   * 农历转公历\n   * @param {number} year 农历年\n   * @param {number} month 农历月\n   * @param {number} day 农历日\n   * @param {boolean} isLeap 是否闰月\n   * @returns {Object} 公历信息\n   */\n  lunarToSolar(year, month, day, isLeap = false) {\n    let totalDays = 0;\n    \n    // 计算从基准年到指定年的总天数\n    for (let y = 1900; y < year; y++) {\n      totalDays += this.getLunarYearDays(y);\n    }\n    \n    // 计算当年从正月到指定月的天数\n    for (let m = 1; m < month; m++) {\n      totalDays += this.getLunarMonthDays(year, m);\n    }\n    \n    // 如果是闰月，需要加上闰月前的天数\n    if (isLeap && this.getLeapMonth(year) === month) {\n      totalDays += this.getLunarMonthDays(year, month);\n    }\n    \n    totalDays += day - 1;\n    \n    // 基准日期加上计算的天数\n    const resultDate = new Date(this.baseDate.getTime() + totalDays * 24 * 60 * 60 * 1000);\n    \n    return {\n      year: resultDate.getFullYear(),\n      month: resultDate.getMonth() + 1,\n      day: resultDate.getDate()\n    };\n  }\n  \n  /**\n   * 获取年干支\n   * @param {number} year 年份\n   * @returns {string} 干支\n   */\n  getYearGanZhi(year) {\n    const ganIndex = (year - 4) % 10;\n    const zhiIndex = (year - 4) % 12;\n    return this.tianGan[ganIndex] + this.diZhi[zhiIndex];\n  }\n  \n  /**\n   * 获取月干支\n   * @param {number} year 年份\n   * @param {number} month 月份\n   * @returns {string} 干支\n   */\n  getMonthGanZhi(year, month) {\n    const yearGanIndex = (year - 4) % 10;\n    let monthGanIndex = (yearGanIndex * 2 + month) % 10;\n    const monthZhiIndex = (month + 1) % 12;\n    \n    return this.tianGan[monthGanIndex] + this.diZhi[monthZhiIndex];\n  }\n  \n  /**\n   * 获取日干支\n   * @param {number} year 公历年\n   * @param {number} month 公历月\n   * @param {number} day 公历日\n   * @returns {string} 干支\n   */\n  getDayGanZhi(year, month, day) {\n    // 基准日期: 1900年1月1日为甲子日\n    const baseDate = new Date(1900, 0, 1);\n    const targetDate = new Date(year, month - 1, day);\n    const daysDiff = Math.floor((targetDate - baseDate) / (1000 * 60 * 60 * 24));\n    \n    const ganIndex = (daysDiff + 10) % 10; // 1900年1月1日为甲日(序号10)\n    const zhiIndex = (daysDiff + 10) % 12;\n    \n    return this.tianGan[ganIndex] + this.diZhi[zhiIndex];\n  }\n  \n  /**\n   * 获取时辰干支\n   * @param {string} dayTianGan 日天干\n   * @param {number} hour 小时 (0-23)\n   * @returns {string} 时辰干支\n   */\n  getHourGanZhi(dayTianGan, hour) {\n    // 时辰对应关系\n    const hourZhiIndex = Math.floor((hour + 1) / 2) % 12;\n    \n    // 日天干与时天干的关系\n    const dayGanIndex = this.tianGan.indexOf(dayTianGan);\n    const hourGanIndex = (dayGanIndex * 2 + hourZhiIndex) % 10;\n    \n    return this.tianGan[hourGanIndex] + this.diZhi[hourZhiIndex];\n  }\n  \n  /**\n   * 获取节气\n   * @param {number} year 年份\n   * @param {number} month 月份\n   * @param {number} day 日期\n   * @returns {string|null} 节气名称\n   */\n  getSolarTerm(year, month, day) {\n    // 简化的节气计算，实际应用中需要更精确的算法\n    const solarTermDates = this.calculateSolarTermDates(year);\n    const dateKey = `${month}-${day}`;\n    \n    return solarTermDates[dateKey] || null;\n  }\n  \n  /**\n   * 计算指定年份的节气日期\n   * @param {number} year 年份\n   * @returns {Object} 节气日期映射\n   */\n  calculateSolarTermDates(year) {\n    // 这里是简化算法，实际需要更复杂的天文计算\n    const termDates = {};\n    \n    // 节气的大致日期（需要根据实际天文数据调整）\n    const baseDates = [\n      [1, 6], [1, 20], [2, 4], [2, 19], [3, 6], [3, 21],\n      [4, 5], [4, 20], [5, 6], [5, 21], [6, 6], [6, 21],\n      [7, 7], [7, 23], [8, 8], [8, 23], [9, 8], [9, 23],\n      [10, 8], [10, 24], [11, 8], [11, 22], [12, 7], [12, 22]\n    ];\n    \n    baseDates.forEach((dateArr, index) => {\n      const key = `${dateArr[0]}-${dateArr[1]}`;\n      termDates[key] = this.solarTerms[index];\n    });\n    \n    return termDates;\n  }\n  \n  /**\n   * 获取农历年总天数\n   * @param {number} year 农历年\n   * @returns {number} 天数\n   */\n  getLunarYearDays(year) {\n    let days = 0;\n    for (let month = 1; month <= 12; month++) {\n      days += this.getLunarMonthDays(year, month);\n    }\n    \n    // 如果有闰月，加上闰月天数\n    const leapMonth = this.getLeapMonth(year);\n    if (leapMonth > 0) {\n      days += this.getLunarMonthDays(year, leapMonth, true);\n    }\n    \n    return days;\n  }\n  \n  /**\n   * 获取农历月天数\n   * @param {number} year 农历年\n   * @param {number} month 农历月\n   * @param {boolean} isLeap 是否闰月\n   * @returns {number} 天数\n   */\n  getLunarMonthDays(year, month, isLeap = false) {\n    // 简化算法，实际需要查表计算\n    if (isLeap) {\n      return 29; // 闰月一般29天\n    }\n    \n    // 大月30天，小月29天\n    return [1, 3, 5, 7, 8, 10, 12].includes(month) ? 30 : 29;\n  }\n  \n  /**\n   * 获取闰月月份\n   * @param {number} year 农历年\n   * @returns {number} 闰月月份，0表示无闰月\n   */\n  getLeapMonth(year) {\n    // 简化算法，实际需要查表\n    if (year % 3 === 0 && year % 19 !== 0) {\n      return Math.floor(Math.random() * 12) + 1; // 随机返回一个月份作为闰月\n    }\n    return 0;\n  }\n  \n  /**\n   * 判断是否闰月\n   * @param {number} year 农历年\n   * @param {number} month 农历月\n   * @returns {boolean} 是否闰月\n   */\n  isLeapMonth(year, month) {\n    return this.getLeapMonth(year) === month;\n  }\n  \n  /**\n   * 格式化日期显示\n   * @param {Object} lunarDate 农历日期对象\n   * @returns {string} 格式化字符串\n   */\n  formatLunarDate(lunarDate) {\n    const yearStr = `${lunarDate.yearGanZhi}年`;\n    const monthStr = `${lunarDate.isLeap ? '闰' : ''}${this.numberToChinese(lunarDate.month)}月`;\n    const dayStr = this.numberToChinese(lunarDate.day, true);\n    \n    return `${yearStr} ${monthStr}${dayStr}`;\n  }\n  \n  /**\n   * 数字转中文\n   * @param {number} num 数字\n   * @param {boolean} isDay 是否为日期\n   * @returns {string} 中文数字\n   */\n  numberToChinese(num, isDay = false) {\n    const chinese = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\n    const units = ['', '十', '廿', '三十'];\n    \n    if (isDay) {\n      if (num <= 10) {\n        return (num === 1 ? '初' : '') + chinese[num];\n      } else if (num < 20) {\n        return '十' + chinese[num - 10];\n      } else if (num < 30) {\n        return '廿' + chinese[num - 20];\n      } else {\n        return '三十';\n      }\n    } else {\n      if (num <= 10) {\n        return chinese[num];\n      } else if (num < 13) {\n        return '十' + (num === 10 ? '' : chinese[num - 10]);\n      }\n    }\n    \n    return num.toString();\n  }\n}\n\n// 导出单例\nexport default new CalendarConverter();"],"names":[],"mappings":"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"}