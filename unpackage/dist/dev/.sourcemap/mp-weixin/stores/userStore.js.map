{"version":3,"file":"userStore.js","sources":["stores/userStore.js"],"sourcesContent":["/**\n * 用户信息状态管理 - Pinia Store\n * 管理用户信息、设置、偏好等\n */\n\nimport { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\n\nexport const useUserStore = defineStore('user', () => {\n  // 状态\n  const userInfo = ref(null)\n  const settings = ref({\n    theme: 'auto', // auto, light, dark\n    defaultCalendar: 'solar', // solar, lunar\n    enableNotifications: true,\n    language: 'zh-CN'\n  })\n  \n  const preferences = ref({\n    showAnimations: true,\n    autoSave: true,\n    shareWithWatermark: true\n  })\n  \n  // 计算属性\n  const isLoggedIn = computed(() => userInfo.value !== null)\n  \n  const displayName = computed(() => {\n    return userInfo.value?.nickname || userInfo.value?.name || '游客'\n  })\n  \n  const avatar = computed(() => {\n    return userInfo.value?.avatar || '/static/images/default-avatar.png'\n  })\n  \n  // 操作方法\n  const setUserInfo = (info) => {\n    userInfo.value = info\n    saveUserInfoToStorage()\n  }\n  \n  const updateSettings = (newSettings) => {\n    settings.value = { ...settings.value, ...newSettings }\n    saveSettingsToStorage()\n  }\n  \n  const updatePreferences = (newPreferences) => {\n    preferences.value = { ...preferences.value, ...newPreferences }\n    savePreferencesToStorage()\n  }\n  \n  const logout = () => {\n    userInfo.value = null\n    uni.removeStorageSync('user_info')\n    \n    // 可选：清理其他用户相关数据\n    // clearUserData()\n  }\n  \n  // 存储操作\n  const saveUserInfoToStorage = () => {\n    try {\n      if (userInfo.value) {\n        uni.setStorageSync('user_info', JSON.stringify(userInfo.value))\n      }\n    } catch (error) {\n      console.error('保存用户信息失败:', error)\n    }\n  }\n  \n  const loadUserInfoFromStorage = () => {\n    try {\n      const stored = uni.getStorageSync('user_info')\n      if (stored) {\n        userInfo.value = JSON.parse(stored)\n      }\n    } catch (error) {\n      console.error('加载用户信息失败:', error)\n    }\n  }\n  \n  const saveSettingsToStorage = () => {\n    try {\n      uni.setStorageSync('user_settings', JSON.stringify(settings.value))\n    } catch (error) {\n      console.error('保存设置失败:', error)\n    }\n  }\n  \n  const loadSettingsFromStorage = () => {\n    try {\n      const stored = uni.getStorageSync('user_settings')\n      if (stored) {\n        settings.value = { ...settings.value, ...JSON.parse(stored) }\n      }\n    } catch (error) {\n      console.error('加载设置失败:', error)\n    }\n  }\n  \n  const savePreferencesToStorage = () => {\n    try {\n      uni.setStorageSync('user_preferences', JSON.stringify(preferences.value))\n    } catch (error) {\n      console.error('保存偏好设置失败:', error)\n    }\n  }\n  \n  const loadPreferencesFromStorage = () => {\n    try {\n      const stored = uni.getStorageSync('user_preferences')\n      if (stored) {\n        preferences.value = { ...preferences.value, ...JSON.parse(stored) }\n      }\n    } catch (error) {\n      console.error('加载偏好设置失败:', error)\n    }\n  }\n  \n  // 初始化\n  const init = () => {\n    loadUserInfoFromStorage()\n    loadSettingsFromStorage()\n    loadPreferencesFromStorage()\n  }\n  \n  return {\n    // 状态\n    userInfo,\n    settings,\n    preferences,\n    \n    // 计算属性\n    isLoggedIn,\n    displayName,\n    avatar,\n    \n    // 方法\n    setUserInfo,\n    updateSettings,\n    updatePreferences,\n    logout,\n    init\n  }\n})"],"names":["defineStore","ref","computed","uni"],"mappings":"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"}