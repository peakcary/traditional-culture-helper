"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initUniXCompilerRootWorkers = exports.uniJavaScriptWorkersPlugin = exports.resolveWorkersDir = exports.uniWorkersPlugin = exports.initWorkers = exports.getWorkersRootDir = exports.getWorkers = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const fast_glob_1 = require("fast-glob");
const utils_1 = require("./utils");
const json_1 = require("./json");
const uts_1 = require("./uts");
const uni_modules_1 = require("./vite/plugins/uts/uni_modules");
const resolve_1 = require("./resolve");
let workersRootDir = null;
let workers = {};
function getWorkers() {
    return workers;
}
exports.getWorkers = getWorkers;
function getWorkersRootDir() {
    return workersRootDir;
}
exports.getWorkersRootDir = getWorkersRootDir;
/**
 * 遍历目录下的所有uts文件，读取文件内容，正则匹配出定义的worker，返回文件名和类名的映射关系
 * export class MyWorkerTask extends WorkerTaskImpl {}
 * @param dir
 */
function initWorkers(workersDir, rootDir) {
    const dir = path_1.default.join(rootDir, workersDir);
    if (!fs_extra_1.default.existsSync(dir)) {
        return workers;
    }
    workers = {};
    (0, fast_glob_1.sync)('**/*.uts', { cwd: dir }).forEach((file) => {
        const content = fs_extra_1.default.readFileSync(path_1.default.join(dir, file), 'utf-8');
        const match = content.match(/export\s+class\s+(.*)\s+extends\s+WorkerTaskImpl\s*{/);
        if (match && match[1]) {
            workers[(0, utils_1.normalizePath)(path_1.default.join(workersDir, file))] = match[1];
        }
    });
    return workers;
}
exports.initWorkers = initWorkers;
function uniWorkersPlugin() {
    const inputDir = process.env.UNI_INPUT_DIR;
    const platform = process.env.UNI_UTS_PLATFORM;
    const resolveWorkers = () => getWorkers();
    function refreshWorkers() {
        const workersDir = resolveWorkersDir(inputDir);
        if (workersDir) {
            workersRootDir = workersDir;
            initWorkers(workersDir, inputDir);
            return true;
        }
        return false;
    }
    refreshWorkers();
    const preprocessor = platform === 'app-android'
        ? (0, uni_modules_1.createAppAndroidUniModulesSyncFilePreprocessorOnce)(false)
        : platform === 'app-ios'
            ? (0, uni_modules_1.createAppIosUniModulesSyncFilePreprocessorOnce)(false)
            : platform === 'app-harmony'
                ? (0, uni_modules_1.createAppHarmonyUniModulesSyncFilePreprocessorOnce)(false)
                : null;
    const cache = {};
    const uniXKotlinCompiler = platform === 'app-android'
        ? (0, uts_1.resolveUTSCompiler)().createUniXKotlinCompilerOnce({
            resolveWorkers,
        })
        : null;
    const uniXSwiftCompiler = platform === 'app-ios'
        ? (0, uts_1.resolveUTSCompiler)().createUniXSwiftCompilerOnce({
            resolveWorkers,
        })
        : null;
    const uniXArkTSCompiler = platform === 'app-harmony'
        ? (0, uts_1.resolveUTSCompiler)().createUniXArkTSCompilerOnce({
            resolveWorkers,
        })
        : null;
    return {
        name: 'uni-workers',
        enforce: 'pre',
        async buildStart() {
            if (refreshWorkers()) {
                if (preprocessor) {
                    await syncWorkersFiles(platform, inputDir, preprocessor, cache);
                }
            }
            // 需要等待 workers 文件同步完之后，添加到 rootFiles 中，触发 tsc 的编译
            if (uniXKotlinCompiler) {
                await initUniXCompilerRootWorkers((0, uts_1.tscOutDir)('app-android'), uniXKotlinCompiler);
            }
            if (uniXSwiftCompiler) {
                await initUniXCompilerRootWorkers((0, uts_1.tscOutDir)('app-ios'), uniXSwiftCompiler);
            }
            if (uniXArkTSCompiler) {
                await initUniXCompilerRootWorkers((0, uts_1.tscOutDir)('app-harmony'), uniXArkTSCompiler);
            }
        },
    };
}
exports.uniWorkersPlugin = uniWorkersPlugin;
async function syncWorkersFiles(platform, inputDir, preprocessor, cache) {
    if (platform !== 'app-harmony' &&
        platform !== 'app-android' &&
        platform !== 'app-ios') {
        return;
    }
    const workersDir = resolveWorkersDir(inputDir);
    if (workersDir) {
        const { syncUTSFiles } = (0, uts_1.resolveUTSCompiler)();
        await syncUTSFiles((0, utils_1.normalizePath)(path_1.default.join(workersDir, '**/*.uts')), inputDir, (0, uts_1.tscOutDir)(platform), true, preprocessor, cache);
    }
}
function resolveWorkersDir(inputDir) {
    const manifestJson = (0, json_1.parseManifestJsonOnce)(inputDir);
    if (manifestJson.workers) {
        let workersDir = typeof manifestJson.workers === 'string'
            ? manifestJson.workers
            : manifestJson.workers.path;
        if (workersDir) {
            workersDir = (0, utils_1.normalizePath)(workersDir);
            const dir = path_1.default.join(inputDir, workersDir);
            if (fs_extra_1.default.existsSync(dir)) {
                return workersDir;
            }
        }
    }
}
exports.resolveWorkersDir = resolveWorkersDir;
function uniJavaScriptWorkersPlugin() {
    // 仅小程序平台外置uni-worker.mp.js
    const external = (process.env.UNI_UTS_PLATFORM || '').startsWith('mp-');
    let workerPolyfillCode = '';
    let isWrite = false;
    const UniAppWorkerJSName = external ? 'uni-worker.mp.js' : 'uni-worker.web.js';
    return {
        name: 'uni:javascript-workers',
        generateBundle(_, bundle) {
            const workers = getWorkers();
            const workerPaths = Object.keys(workers).map((key) => {
                return key.replace('.uts', '.js');
            });
            if (workerPaths.length) {
                if (!workerPolyfillCode) {
                    workerPolyfillCode = fs_extra_1.default.readFileSync((0, resolve_1.resolveBuiltIn)(`@dcloudio/uni-app/dist-x/${UniAppWorkerJSName}`), 'utf-8');
                }
                Object.keys(bundle).forEach((file) => {
                    if (workerPaths.includes(file)) {
                        const chunk = bundle[file];
                        if (chunk.type === 'chunk') {
                            const workerCode = external
                                ? `require('${(0, utils_1.normalizePath)(path_1.default.relative(path_1.default.dirname(file), path_1.default.join(getWorkersRootDir(), 'uni-worker.js')))}')`
                                : workerPolyfillCode;
                            chunk.code = `${workerCode}\n${chunk.code}\nnew ${workers[file.replace('.js', '.uts')]}()`;
                        }
                    }
                });
            }
        },
        writeBundle() {
            if (external && Object.keys(getWorkers()).length && !isWrite) {
                isWrite = true;
                // 写入uni-worker.js
                fs_extra_1.default.outputFileSync(path_1.default.resolve(process.env.UNI_OUTPUT_DIR, getWorkersRootDir(), 'uni-worker.js'), workerPolyfillCode);
            }
        },
    };
}
exports.uniJavaScriptWorkersPlugin = uniJavaScriptWorkersPlugin;
async function initUniXCompilerRootWorkers(rootDir, compiler) {
    const workers = getWorkers();
    if (Object.keys(workers).length) {
        for (const key in workers) {
            const file = path_1.default.join(rootDir, key + '.ts');
            if (fs_extra_1.default.existsSync(file)) {
                if (!compiler.hasRootFile(file)) {
                    await compiler.addRootFile(file);
                }
            }
        }
    }
}
exports.initUniXCompilerRootWorkers = initUniXCompilerRootWorkers;
